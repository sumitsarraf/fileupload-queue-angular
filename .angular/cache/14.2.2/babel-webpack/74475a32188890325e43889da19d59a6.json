{"ast":null,"code":"import * as _ from 'lodash';\nimport { HttpClient, HttpErrorResponse, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { HttpEventType } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var FileQueueStatus = /*#__PURE__*/(() => {\n  (function (FileQueueStatus) {\n    FileQueueStatus[FileQueueStatus[\"Pending\"] = 0] = \"Pending\";\n    FileQueueStatus[FileQueueStatus[\"Success\"] = 1] = \"Success\";\n    FileQueueStatus[FileQueueStatus[\"Error\"] = 2] = \"Error\";\n    FileQueueStatus[FileQueueStatus[\"Progress\"] = 3] = \"Progress\";\n  })(FileQueueStatus || (FileQueueStatus = {}));\n\n  return FileQueueStatus;\n})();\nexport class FileQueueObject {\n  constructor(file) {\n    this.status = FileQueueStatus.Pending;\n    this.progress = 0;\n    this.request = null;\n    this.response = null; // actions\n\n    this.upload = () => {};\n\n    this.cancel = () => {};\n\n    this.remove = () => {}; // statuses\n\n\n    this.isPending = () => this.status === FileQueueStatus.Pending;\n\n    this.isSuccess = () => this.status === FileQueueStatus.Success;\n\n    this.isError = () => this.status === FileQueueStatus.Error;\n\n    this.inProgress = () => this.status === FileQueueStatus.Progress;\n\n    this.isUploadable = () => this.status === FileQueueStatus.Pending || this.status === FileQueueStatus.Error;\n\n    this.file = file;\n  }\n\n} // tslint:disable-next-line:max-classes-per-file\n\nexport let FileUploaderService = /*#__PURE__*/(() => {\n  class FileUploaderService {\n    constructor(http) {\n      this.http = http; //public url: string = 'https://jsonplaceholder.typicode.com/posts';\n\n      this.url = 'http://localhost:8080/upload';\n      this._files = [];\n      this._queue = new BehaviorSubject(this._files);\n    } // the queue\n\n\n    get queue() {\n      return this._queue.asObservable();\n    } // public events\n\n\n    onCompleteItem(queueObj, response) {\n      return {\n        queueObj,\n        response\n      };\n    } // public functions\n\n\n    addToQueue(data) {\n      // add file to the queue\n      _.each(data, file => this._addToQueue(file));\n    }\n\n    clearQueue() {\n      // clear the queue\n      this._files = [];\n\n      this._queue.next(this._files);\n    }\n\n    uploadAll() {\n      // upload all except already successfull or in progress\n      _.each(this._files, queueObj => {\n        if (queueObj.isUploadable()) {\n          this._upload(queueObj);\n        }\n      });\n    } // private functions\n\n\n    _addToQueue(file) {\n      const queueObj = new FileQueueObject(file); // set the individual object events\n\n      queueObj.upload = () => this._upload(queueObj);\n\n      queueObj.remove = () => this._removeFromQueue(queueObj);\n\n      queueObj.cancel = () => this._cancel(queueObj); // push to the queue\n\n\n      this._files.push(queueObj);\n\n      this._queue.next(this._files);\n    }\n\n    _removeFromQueue(queueObj) {\n      _.remove(this._files, queueObj);\n    }\n\n    _upload(queueObj) {\n      // create form data for file\n      const form = new FormData();\n      form.append('file', queueObj.file, queueObj.file.name); // upload file and report progress\n\n      const req = new HttpRequest('POST', this.url, form, {\n        reportProgress: true\n      }); // upload file and report progress\n\n      queueObj.request = this.http.request(req).subscribe(event => {\n        if (event.type === HttpEventType.UploadProgress) {\n          this._uploadProgress(queueObj, event);\n        } else if (event instanceof HttpResponse) {\n          this._uploadComplete(queueObj, event);\n        }\n      }, err => {\n        if (err.error instanceof Error) {\n          // A client-side or network error occurred. Handle it accordingly.\n          this._uploadFailed(queueObj, err);\n        } else {\n          // The backend returned an unsuccessful response code.\n          this._uploadFailed(queueObj, err);\n        }\n      });\n      return queueObj;\n    }\n\n    _cancel(queueObj) {\n      // update the FileQueueObject as cancelled\n      queueObj.request.unsubscribe();\n      queueObj.progress = 0;\n      queueObj.status = FileQueueStatus.Pending;\n\n      this._queue.next(this._files);\n    }\n\n    _uploadProgress(queueObj, event) {\n      // update the FileQueueObject with the current progress\n      const progress = Math.round(100 * event.loaded / event.total);\n      queueObj.progress = progress;\n      queueObj.status = FileQueueStatus.Progress;\n\n      this._queue.next(this._files);\n    }\n\n    _uploadComplete(queueObj, response) {\n      // update the FileQueueObject as completed\n      queueObj.progress = 100;\n      queueObj.status = FileQueueStatus.Success;\n      queueObj.response = response;\n\n      this._queue.next(this._files);\n\n      this.onCompleteItem(queueObj, response.body);\n    }\n\n    _uploadFailed(queueObj, response) {\n      // update the FileQueueObject as errored\n      queueObj.progress = 0;\n      queueObj.status = FileQueueStatus.Error;\n      queueObj.response = response;\n\n      this._queue.next(this._files);\n    }\n\n  }\n\n  FileUploaderService.ɵfac = function FileUploaderService_Factory(t) {\n    return new (t || FileUploaderService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  FileUploaderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileUploaderService,\n    factory: FileUploaderService.ɵfac\n  });\n  return FileUploaderService;\n})();","map":null,"metadata":{},"sourceType":"module"}